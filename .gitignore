# Prerequisites
*.d

# Object files
*.o
*.ko
*.obj
*.elf

# Linker output
*.ilk
*.map
*.exp

# Precompiled Headers
*.gch
*.pch

# Libraries
*.lib
*.a
*.la
*.lo

# Shared objects (inc. Windows DLLs)
*.dll
*.so
*.so.*
*.dylib

# Executables
*.exe
*.out
*.app
*.i*86
*.x86_64
*.hex

# Debug files
*.dSYM/
*.su
*.idb
*.pdb

# Kernel Module Compile Results
*.mod*
*.#include <iostream>
#include <cstring>
#include <arpa/inet.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

#define BUF_SIZE 1024

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <tun_interface_name>" << std::endl;
        return 1;
    }

    int tun_fd = open("/dev/net/tun", O_RDWR);
    if (tun_fd < 0) {
        std::cerr << "Failed to open TUN device" << std::endl;
        return 1;
    }

    struct ifreq ifr;
    std::memset(&ifr, 0, sizeof(ifr));
    ifr.ifr_flags = IFF_TUN | IFF_NO_PI;
    std::strncpy(ifr.ifr_name, argv[1], IFNAMSIZ - 1);
    int err = ioctl(tun_fd, TUNSETIFF, (void*) &ifr);
    if (err < 0) {
        std::cerr << "Failed to set TUN interface" << std::endl;
        close(tun_fd);
        return 1;
    }

    int sock_fd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock_fd < 0) {
        std::cerr << "Failed to create socket" << std::endl;
        close(tun_fd);
        return 1;
    }

    struct sockaddr_in server_addr, client_addr;
    std::memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr("10.0.0.1");
    server_addr.sin_port = htons(5000);
    err = bind(sock_fd, (struct sockaddr*) &server_addr, sizeof(server_addr));
    if (err < 0) {
        std::cerr << "Failed to bind socket" << std::endl;
        close(sock_fd);
        close(tun
#include <iostream>
#include <cstring>
#include <arpa/inet.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

#define BUF_SIZE 1024

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <tun_interface_name>" << std::endl;
        return 1;
    }

    int tun_fd = open("/dev/net/tun", O_RDWR);
    if (tun_fd < 0) {
        std::cerr << "Failed to open TUN device" << std::endl;
        return 1;
    }

    struct ifreq ifr;
    std::memset(&ifr, 0, sizeof(ifr));
    ifr.ifr_flags = IFF_TUN | IFF_NO_PI;
    std::strncpy(ifr.ifr_name, argv[1], IFNAMSIZ - 1);
    int err = ioctl(tun_fd, TUNSETIFF, (void*) &ifr);
    if (err < 0) {
        std::cerr << "Failed to set TUN interface" << std::endl;
        close(tun_fd);
        return 1;
    }

    int sock_fd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock_fd < 0) {
        std::cerr << "Failed to create socket" << std::endl;
        close(tun_fd);
        return 1;
    }

    struct sockaddr_in server_addr, client_addr;
    std::memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr("10.0.0.1");
    server_addr.sin_port = htons(5000);
    err = bind(sock_fd, (struct sockaddr*) &server_addr, sizeof(server_addr));
    if (err < 0) {
        std::cerr << "Failed to bind socket" << std::endl;
        close(sock_fd);
        close(tun
#include <iostream>
#include <cstring>
#include <arpa/inet.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

#define BUF_SIZE 1024

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <tun_interface_name>" << std::endl;
        return 1;
    }

    int tun_fd = open("/dev/net/tun", O_RDWR);
    if (tun_fd < 0) {
        std::cerr << "Failed to open TUN device" << std::endl;
        return 1;
    }

    struct ifreq ifr;
    std::memset(&ifr, 0, sizeof(ifr));
    ifr.ifr_flags = IFF_TUN | IFF_NO_PI;
    std::strncpy(ifr.ifr_name, argv[1], IFNAMSIZ - 1);
    int err = ioctl(tun_fd, TUNSETIFF, (void*) &ifr);
    if (err < 0) {
        std::cerr << "Failed to set TUN interface" << std::endl;
        close(tun_fd);
        return 1;
    }

    int sock_fd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sock_fd < 0) {
        std::cerr << "Failed to create socket" << std::endl;
        close(tun_fd);
        return 1;
    }

    struct sockaddr_in server_addr, client_addr;
    std::memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr("10.0.0.1");
    server_addr.sin_port = htons(5000);
    err = bind(sock_fd, (struct sockaddr*) &server_addr, sizeof(server_addr));
    if (err < 0) {
        std::cerr << "Failed to bind socket" << std::endl;
        close(sock_fd);
        close(tun

.tmp_versions/
modules.order
Module.symvers
Mkfile.old
dkms.conf
